Game is written in Python3, c, and c++



Assignment Instructions
Overview

Use the principles of Object Oriented Design (OOD) and Object Oriented Programming (OOP) to develop a simulation of a horse race. Each horse will be an object, and the race will be another object that contains a list of horses and manages the race. Along the way, you will experiment with UML, create classes, review access modifiers, build member variables, add access methods, and create constructors.

The Project

Build a program that simulates a horse race. Each horse starts at position 0. On each turn, the horse 'flips a coin' (I don't know how horses flip coins, but just go with me for a moment.) Half the time, the horse will advance one step. The other primary entity in this game is the race (or the track, if you prefer.) This object will contain a series of horses. It will also have the ability to start the race. When the race is running, the race class will 'tell' each horse to advance, and will print out a track diagram showing the relative positions of the horses.

Sample Run

Here is a sample run of the program:
0........................
.1.......................
2........................
3........................
.4.......................
Press enter for another turn:
0........................
..1......................
.2.......................
.3.......................
.4.......................
Press enter for another turn:
.0.......................
..1......................
..2......................
.3.......................
.4.......................
Press enter for another turn:
.0.......................
...1.....................
..2......................
..3......................
..4......................
Press enter for another turn:
..0......................
...1.....................
..2......................
...3.....................
..4......................
Press enter for another turn:
..0......................
....1....................
..2......................
....3....................
...4.....................
Press enter for another turn:
...0.....................
.....1...................
...2.....................
.....3...................
....4....................
Press enter for another turn:
...0.....................
.....1...................
...2.....................
.....3...................
.....4...................
Press enter for another turn:
...0.....................
......1..................
....2....................
......3..................
.....4...................
Press enter for another turn:
....0....................
.......1.................
.....2...................
.......3.................
.....4...................
Press enter for another turn:
.....0...................
........1................
......2..................
........3................
.....4...................
Press enter for another turn:
......0..................
........1................
.......2.................
.........3...............
......4..................
Press enter for another turn:
.......0.................
........1................
.......2.................
.........3...............
......4..................
Press enter for another turn:
........0................
........1................
.......2.................
..........3..............
......4..................
Press enter for another turn:
.........0...............
.........1...............
.......2.................
...........3.............
......4..................
Press enter for another turn:
.........0...............
.........1...............
........2................
............3............
......4..................
Press enter for another turn:
..........0..............
.........1...............
.........2...............
............3............
......4..................
Press enter for another turn:
...........0.............
..........1..............
.........2...............
.............3...........
.......4.................
Press enter for another turn:
............0............
..........1..............
..........2..............
..............3..........
.......4.................
Press enter for another turn:
.............0...........
..........1..............
..........2..............
...............3.........
........4................
Press enter for another turn:
..............0..........
...........1.............
..........2..............
................3........
........4................
Press enter for another turn:
..............0..........
............1............
..........2..............
.................3.......
........4................
Press enter for another turn:
..............0..........
............1............
...........2.............
..................3......
.........4...............
Press enter for another turn:
...............0.........
.............1...........
...........2.............
...................3.....
.........4...............
Press enter for another turn:
................0........
.............1...........
...........2.............
....................3....
..........4..............
Press enter for another turn:
................0........
.............1...........
............2............
....................3....
..........4..............
Press enter for another turn:
................0........
..............1..........
.............2...........
....................3....
..........4..............
Press enter for another turn:
.................0.......
..............1..........
..............2..........
.....................3...
...........4.............
Press enter for another turn:
.................0.......
..............1..........
...............2.........
......................3..
............4............
Press enter for another turn:
.................0.......
..............1..........
...............2.........
.......................3.
.............4...........
Press enter for another turn:
.................0.......
..............1..........
................2........
.......................3.
..............4..........
Press enter for another turn:
.................0.......
..............1..........
................2........
........................3
...............4.........
Press enter for another turn:
.................0.......
...............1.........
................2........
.........................
Horse 3 wins!
................4........
Press enter for another turn:






Code Organization

While it is possible to write this program in a procedural fashion, this program is a perfect candidate for the object-oriented paradigm. You may organize the objects however you wish, but you must define at least two classes. If you wish, you may use the UML diagram I created as a starting point:





Programming Methodology

This program must compile on Pegasus. You may use a single file or you may break the file into headers and code files, as you prefer. It is not necessary to create a GUI for this project. Since this is an exercise in OOP programming, you are expected to create at least two classes. If you're unsure where to start, begin with the class diagram provided above. All the methods and member variables necessary are listed in the UML diagram, but you might need to create other local variables inside your methods. There are other legitimate ways to organize this data, but this is one of the simpler techniques.
Tips

It may be easiest to start with all the code in a single file. For this first OOP project, it might make more sense to go with straightforward organization rather than immediately coding for code re-use.
The horse class will need to utilize random number generation. I included an example of this with the last homework exercise, but you may still need to look up how to generate a random number in C++. Don't forget the srand() function to ensure you get a different random sequence on each run of the program.
Each class will need a simple constructor. (My version of Race actually has two constructors.) Remember that every class should have a null parameter constructor. Also, remember that the main point of a constructor is to initialize the member variables. You might additionally do some other initial work that happens only once in the constructor. (That was a hint.)
Each method should represent something the class can DO. Each member variable should be information that the data has.
This program uses an aggregate data structure. One of the classes includes an array of instances of the other class.
The Race class' start() method (at least in my version of the program) controls most of the race action. It not only starts the race, but it controls the entire race.
The Race::printLane() method is used to print out a visual depiction of the lane for a particular horse. This method is easy to visualize, but it can be tricky to implement, because the horse ID will probably be an integer, and the rest of the track will likely be characters. You might need to look into the stringstream object or the sprintf() function for potential solutions to this problem.
The easiest way to implement a "press enter to continue" mechanism is with the cin.ignore() function.
Black Belt Extensions

The black belt potential for this project is enormous. As always, begin with the basic expectations. Once you get the core program working, there are many ways to extend it. Here are a few options:
Create a new type of horse that advances on a percentage rather than a simple coin flip. This could be an extension of the basic Horse class. For the constructor, include an int parameter that indicates the percentage of time the horse will move forward. You will need to modify the advance() method to handle the more elaborate movement mechanism. You may want to then have horses with differing abilities in the same race.
Implement a betting mechanism. Allow the user to bet on a race before it begins. Keep track of the user's cash through several runs of the program.
Give horses with different abilities different odds. Reward a long shot (40% chance of advancing each round) much more than a favorite (50% chance of advancing.)
Multi-player - Allow more than one player to place bets, keeping track of each player's performance
Bribery. Allow user to 'purchase' performance modifications. This will increase or decrease a particular horse's performance during a race, but there is a chance the player will be caught and immediately lose all his money.
Cosmetic changes. Add a menu system, GUI, or other features to make the game more aesthetically appealing. Try writing the game in another language.
